# vim: ts=2
---
- hosts: all
  remote_user: vagrant
  become: yes
  become_method: sudo
    
  
  vars:
    vHome: /home/vagrant
    mysql_root_password: 'devops@2022'
    ansible_python_interpreter: /usr/bin/python3
    db_user_root : root
    db_user: devops
    db_pass: devops@2022
    db_name: devops
    path_to_my_sql_files: /vagrant_scripts
    sonar_db: sonarqube
    sonar_db_user: sonar
    sonar_db_pass: sonar123
    sonar_property_file_path: /opt/sonarqube/conf/sonar.properties
    sonar_sh_file_path: /opt/sonarqube/bin/linux-x86-64/sonar.sh
    sonar_service_file_path: /etc/systemd/system/sonar.service

  tasks:

    - name: Ansible apt install nmap
      apt:
        name: nmap
        state: present

    - name: Utility present
      ansible.builtin.package:
        name: python3-psycopg2
        state: present
    
    - name: add repository
      apt_repository:
        repo: ppa:openjdk-r/ppa
    - name: Update APT package manager repositories cache
      become: true
      apt:
        update_cache: yes

    - name: Install Java using Ansible
      become: yes
      apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - openjdk-11-jdk

    - name: Set up Postgres Sql
      shell: |
        echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list 
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        sudo apt install postgresql postgresql-contrib -y
        sudo systemctl enable postgresql
        sudo systemctl start postgresql
      args:
        warn: no

    - name: Create sonarqube database
      postgresql_db:
        state: present
        name: "{{ sonar_db }}"
      become: yes
      become_user: postgres
    
    - name: Connect to sonarqube database, create db user sonar, and grant access to db
      postgresql_user:
        db: "{{ sonar_db }}"
        name: "{{ sonar_db_user }}"
        password: "{{ sonar_db_pass }}"
        priv: ALL
      become: yes
      become_user: postgres
    
    - name: Enable Postgresql
      systemd:
        name: postgresql
        enabled: yes

    - name: Start Postgresql
      systemd:
        name: postgresql
        state: started

    - name: Install Sonarqube application
      shell: |
        sudo apt-get install zip -y
        wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.9.8.54436.zip
        sudo unzip sonarqube-8.9.8.54436.zip
        sudo unzip sonarqube-8.9.8.54436.zip -d /opt
        sudo mv /opt/sonarqube-8.9.8.54436 /opt/sonarqube
        sudo groupadd sonar
        sudo useradd -d /opt/sonarqube -g sonar sonar
        sudo chown sonar:sonar /opt/sonarqube -R
      args:
        warn: no
    
    - name: Configure SonarQube DB username
      lineinfile:
        path: "{{ sonar_property_file_path }}"
        regexp: "^sonar.jdbc.username="
        insertafter: "^#sonar.jdbc.username="
        line: "sonar.jdbc.username={{ sonar_db_user }}"
    
    - name: Configure SonarQube DB password
      lineinfile:
        path: "{{ sonar_property_file_path }}"
        regexp: "^sonar.jdbc.password="
        insertafter: "^#sonar.jdbc.password="
        line: "sonar.jdbc.password={{ sonar_db_pass }}"
    
    - name: Configure SonarQube DB connection string
      lineinfile:
        path: "{{ sonar_property_file_path }}"
        regexp: "sonar.jdbc.url=jdbc:postgresql://localhost/sonar"
        insertafter: "^#sonar.jdbc.url=jdbc:postgresql://localhost/sonar"
        line: "sonar.jdbc.url=jdbc:postgresql://localhost:5432/sonarqube"
    
    - name: Configure SonarQube to run as the sonar user
      lineinfile:
        path: "{{ sonar_sh_file_path }}"
        regexp: "RUN_AS_USER=sonar"
        insertafter: "#RUN_AS_USER="
        line: "RUN_AS_USER=sonar"

    - name: Creating an sonar.service file
      file:
        path: "{{ sonar_service_file_path }}"
        state: touch
    - name: Copy a new "ntp.conf" file into place, backing up the original if it differs from the copied version
      ansible.builtin.copy:
        src: /vagrant_scripts/sonar.service
        dest: "{{ sonar_service_file_path }}"
        remote_src: yes
        owner: root
        group: root
        mode: '0777'
    
    - name: Install Sonarqube application
      shell: |
        sudo systemctl enable sonar
        sudo systemctl start sonar
        sudo systemctl status sonar
      args:
        warn: no
    
    - name: add lines
      lineinfile: 
        dest: /etc/sysctl.conf
        line: '{{ item }}'
      with_items:
        - 'vm.max_map_count=262144'
        - 'fs.file-max=65536'
        - 'ulimit -n 65536'
        - 'ulimit -u 4096'

    - name: Unconditionally reboot the machine with all defaults
      reboot:    



